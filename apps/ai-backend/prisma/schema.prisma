datasource db {
  provider = "mongodb"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  access             InvitationType[]    @relation(fields: [accessIds], references: [id])
  accessIds          String[]            @db.ObjectId
  createdAt          DateTime            @default(now())
  email              String?             @unique
  firstName          String?
  id                 String              @id @default(auto()) @map("_id") @db.ObjectId
  lastName           String?
  password           String
  payments           Payment[]
  phone              String?
  roles              Json
  status             EnumUserStatus?
  updatedAt          DateTime            @updatedAt
  username           String              @unique
  weddingInvitations WeddingInvitation[]
}

model WeddingInvitation {
  bride                     Json?
  createdAt                 DateTime                   @default(now())
  design                    Json?
  events                    Json?
  galleries                 Json?
  gifts                     Json?
  groom                     Json?
  id                        String                     @id @default(auto()) @map("_id") @db.ObjectId
  invites                   Json?
  moments                   Json?
  quotes                    Json?
  updatedAt                 DateTime                   @updatedAt
  userId                    User                       @relation(fields: [userIdId], references: [id])
  userIdId                  String                     @db.ObjectId
  video                     String?
  weddingInvitationComments WeddingInvitationComment[]
  weddingInvitationShares   WeddingInvitationShare[]
}

model WeddingInvitationShare {
  createdAt   DateTime           @default(now())
  id          String             @id @default(auto()) @map("_id") @db.ObjectId
  institution String?
  link        String?
  name        String?
  open        String?
  updatedAt   DateTime           @updatedAt
  view        Int?
  weddingId   WeddingInvitation? @relation(fields: [ID], references: [id])
  ID          String?            @db.ObjectId
}

model WeddingInvitationComment {
  address     String?
  comment     String?
  createdAt   DateTime           @default(now())
  email       String?
  id          String             @id @default(auto()) @map("_id") @db.ObjectId
  institution String?
  link        String?
  moment      Json?
  name        String?
  phone       String?
  present     String?
  updatedAt   DateTime           @updatedAt
  weddingId   WeddingInvitation? @relation(fields: [weddingIdId], references: [id])
  weddingIdId String?            @db.ObjectId
}

model Payment {
  accessTo        InvitationType?    @relation(fields: [accessToId], references: [id])
  accessToId      String?            @db.ObjectId
  createdAt       DateTime           @default(now())
  evidence        String?
  id              String             @id @default(auto()) @map("_id") @db.ObjectId
  paymentMethod   PaymentsMethod?    @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId String?            @db.ObjectId
  status          EnumPaymentStatus?
  updatedAt       DateTime           @updatedAt
  userId          User?              @relation(fields: [userIdId], references: [id])
  userIdId        String?            @db.ObjectId
}

model PaymentsMethod {
  account     EnumPaymentsMethodAccount?
  createdAt   DateTime                       @default(now())
  id          String                         @id @default(auto()) @map("_id") @db.ObjectId
  logo        String?
  nameRef     String?
  noRef       String?
  payments    Payment[]
  paymentType EnumPaymentsMethodPaymentType?
  status      EnumPaymentsMethodStatus?
  updatedAt   DateTime                       @updatedAt
}

model InvitationType {
  createdAt  DateTime                  @default(now())
  id         String                    @id @default(auto()) @map("_id") @db.ObjectId
  invitation String?
  payments   Payment[]
  status     EnumInvitationTypeStatus?
  updatedAt  DateTime                  @updatedAt
  user       User[]                    @relation(fields: [userIds], references: [id])
  userIds    String[]                  @db.ObjectId
}

enum EnumUserStatus {
  Register
  Active
  Nonactive
}

enum EnumPaymentStatus {
  Success
  Pending
  Failed
}

enum EnumPaymentsMethodAccount {
  Bri
  Mandiri
  Bni
  Hsbc
  ShopeePay
  Ovo
  Gopay
  Dana
  Qris
}

enum EnumPaymentsMethodPaymentType {
  BankTransfer
  Ewallet
}

enum EnumPaymentsMethodStatus {
  Active
  NonActive
}

enum EnumInvitationTypeStatus {
  Active
  NonActive
}
