/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { WeddingInvitation } from "./WeddingInvitation";
import { WeddingInvitationCountArgs } from "./WeddingInvitationCountArgs";
import { WeddingInvitationFindManyArgs } from "./WeddingInvitationFindManyArgs";
import { WeddingInvitationFindUniqueArgs } from "./WeddingInvitationFindUniqueArgs";
import { CreateWeddingInvitationArgs } from "./CreateWeddingInvitationArgs";
import { UpdateWeddingInvitationArgs } from "./UpdateWeddingInvitationArgs";
import { DeleteWeddingInvitationArgs } from "./DeleteWeddingInvitationArgs";
import { WeddingInvitationCommentFindManyArgs } from "../../weddingInvitationComment/base/WeddingInvitationCommentFindManyArgs";
import { WeddingInvitationComment } from "../../weddingInvitationComment/base/WeddingInvitationComment";
import { WeddingInvitationShareFindManyArgs } from "../../weddingInvitationShare/base/WeddingInvitationShareFindManyArgs";
import { WeddingInvitationShare } from "../../weddingInvitationShare/base/WeddingInvitationShare";
import { User } from "../../user/base/User";
import { WeddingInvitationService } from "../weddingInvitation.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => WeddingInvitation)
export class WeddingInvitationResolverBase {
  constructor(
    protected readonly service: WeddingInvitationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "WeddingInvitation",
    action: "read",
    possession: "any",
  })
  async _weddingInvitationsMeta(
    @graphql.Args() args: WeddingInvitationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [WeddingInvitation])
  @nestAccessControl.UseRoles({
    resource: "WeddingInvitation",
    action: "read",
    possession: "any",
  })
  async weddingInvitations(
    @graphql.Args() args: WeddingInvitationFindManyArgs
  ): Promise<WeddingInvitation[]> {
    return this.service.weddingInvitations(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => WeddingInvitation, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "WeddingInvitation",
    action: "read",
    possession: "own",
  })
  async weddingInvitation(
    @graphql.Args() args: WeddingInvitationFindUniqueArgs
  ): Promise<WeddingInvitation | null> {
    const result = await this.service.weddingInvitation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WeddingInvitation)
  @nestAccessControl.UseRoles({
    resource: "WeddingInvitation",
    action: "create",
    possession: "any",
  })
  async createWeddingInvitation(
    @graphql.Args() args: CreateWeddingInvitationArgs
  ): Promise<WeddingInvitation> {
    return await this.service.createWeddingInvitation({
      ...args,
      data: {
        ...args.data,

        userId: {
          connect: args.data.userId,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WeddingInvitation)
  @nestAccessControl.UseRoles({
    resource: "WeddingInvitation",
    action: "update",
    possession: "any",
  })
  async updateWeddingInvitation(
    @graphql.Args() args: UpdateWeddingInvitationArgs
  ): Promise<WeddingInvitation | null> {
    try {
      return await this.service.updateWeddingInvitation({
        ...args,
        data: {
          ...args.data,

          userId: {
            connect: args.data.userId,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WeddingInvitation)
  @nestAccessControl.UseRoles({
    resource: "WeddingInvitation",
    action: "delete",
    possession: "any",
  })
  async deleteWeddingInvitation(
    @graphql.Args() args: DeleteWeddingInvitationArgs
  ): Promise<WeddingInvitation | null> {
    try {
      return await this.service.deleteWeddingInvitation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [WeddingInvitationComment], {
    name: "weddingInvitationComments",
  })
  @nestAccessControl.UseRoles({
    resource: "WeddingInvitationComment",
    action: "read",
    possession: "any",
  })
  async findWeddingInvitationComments(
    @graphql.Parent() parent: WeddingInvitation,
    @graphql.Args() args: WeddingInvitationCommentFindManyArgs
  ): Promise<WeddingInvitationComment[]> {
    const results = await this.service.findWeddingInvitationComments(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [WeddingInvitationShare], {
    name: "weddingInvitationShares",
  })
  @nestAccessControl.UseRoles({
    resource: "WeddingInvitationShare",
    action: "read",
    possession: "any",
  })
  async findWeddingInvitationShares(
    @graphql.Parent() parent: WeddingInvitation,
    @graphql.Args() args: WeddingInvitationShareFindManyArgs
  ): Promise<WeddingInvitationShare[]> {
    const results = await this.service.findWeddingInvitationShares(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "userId",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUserId(
    @graphql.Parent() parent: WeddingInvitation
  ): Promise<User | null> {
    const result = await this.service.getUserId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
