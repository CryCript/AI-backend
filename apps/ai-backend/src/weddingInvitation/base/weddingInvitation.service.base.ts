/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  WeddingInvitation as PrismaWeddingInvitation,
  WeddingInvitationComment as PrismaWeddingInvitationComment,
  WeddingInvitationShare as PrismaWeddingInvitationShare,
  User as PrismaUser,
} from "@prisma/client";

export class WeddingInvitationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WeddingInvitationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.weddingInvitation.count(args);
  }

  async weddingInvitations<T extends Prisma.WeddingInvitationFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.WeddingInvitationFindManyArgs>
  ): Promise<PrismaWeddingInvitation[]> {
    return this.prisma.weddingInvitation.findMany<Prisma.WeddingInvitationFindManyArgs>(
      args
    );
  }
  async weddingInvitation<T extends Prisma.WeddingInvitationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.WeddingInvitationFindUniqueArgs>
  ): Promise<PrismaWeddingInvitation | null> {
    return this.prisma.weddingInvitation.findUnique(args);
  }
  async createWeddingInvitation<T extends Prisma.WeddingInvitationCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WeddingInvitationCreateArgs>
  ): Promise<PrismaWeddingInvitation> {
    return this.prisma.weddingInvitation.create<T>(args);
  }
  async updateWeddingInvitation<T extends Prisma.WeddingInvitationUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WeddingInvitationUpdateArgs>
  ): Promise<PrismaWeddingInvitation> {
    return this.prisma.weddingInvitation.update<T>(args);
  }
  async deleteWeddingInvitation<T extends Prisma.WeddingInvitationDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.WeddingInvitationDeleteArgs>
  ): Promise<PrismaWeddingInvitation> {
    return this.prisma.weddingInvitation.delete(args);
  }

  async findWeddingInvitationComments(
    parentId: string,
    args: Prisma.WeddingInvitationCommentFindManyArgs
  ): Promise<PrismaWeddingInvitationComment[]> {
    return this.prisma.weddingInvitation
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .weddingInvitationComments(args);
  }

  async findWeddingInvitationShares(
    parentId: string,
    args: Prisma.WeddingInvitationShareFindManyArgs
  ): Promise<PrismaWeddingInvitationShare[]> {
    return this.prisma.weddingInvitation
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .weddingInvitationShares(args);
  }

  async getUserId(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.weddingInvitation
      .findUnique({
        where: { id: parentId },
      })
      .userId();
  }
}
