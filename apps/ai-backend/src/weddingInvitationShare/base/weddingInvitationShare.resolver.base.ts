/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { WeddingInvitationShare } from "./WeddingInvitationShare";
import { WeddingInvitationShareCountArgs } from "./WeddingInvitationShareCountArgs";
import { WeddingInvitationShareFindManyArgs } from "./WeddingInvitationShareFindManyArgs";
import { WeddingInvitationShareFindUniqueArgs } from "./WeddingInvitationShareFindUniqueArgs";
import { CreateWeddingInvitationShareArgs } from "./CreateWeddingInvitationShareArgs";
import { UpdateWeddingInvitationShareArgs } from "./UpdateWeddingInvitationShareArgs";
import { DeleteWeddingInvitationShareArgs } from "./DeleteWeddingInvitationShareArgs";
import { WeddingInvitation } from "../../weddingInvitation/base/WeddingInvitation";
import { WeddingInvitationShareService } from "../weddingInvitationShare.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => WeddingInvitationShare)
export class WeddingInvitationShareResolverBase {
  constructor(
    protected readonly service: WeddingInvitationShareService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "WeddingInvitationShare",
    action: "read",
    possession: "any",
  })
  async _weddingInvitationSharesMeta(
    @graphql.Args() args: WeddingInvitationShareCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [WeddingInvitationShare])
  @nestAccessControl.UseRoles({
    resource: "WeddingInvitationShare",
    action: "read",
    possession: "any",
  })
  async weddingInvitationShares(
    @graphql.Args() args: WeddingInvitationShareFindManyArgs
  ): Promise<WeddingInvitationShare[]> {
    return this.service.weddingInvitationShares(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => WeddingInvitationShare, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "WeddingInvitationShare",
    action: "read",
    possession: "own",
  })
  async weddingInvitationShare(
    @graphql.Args() args: WeddingInvitationShareFindUniqueArgs
  ): Promise<WeddingInvitationShare | null> {
    const result = await this.service.weddingInvitationShare(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WeddingInvitationShare)
  @nestAccessControl.UseRoles({
    resource: "WeddingInvitationShare",
    action: "create",
    possession: "any",
  })
  async createWeddingInvitationShare(
    @graphql.Args() args: CreateWeddingInvitationShareArgs
  ): Promise<WeddingInvitationShare> {
    return await this.service.createWeddingInvitationShare({
      ...args,
      data: {
        ...args.data,

        weddingId: args.data.weddingId
          ? {
              connect: args.data.weddingId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WeddingInvitationShare)
  @nestAccessControl.UseRoles({
    resource: "WeddingInvitationShare",
    action: "update",
    possession: "any",
  })
  async updateWeddingInvitationShare(
    @graphql.Args() args: UpdateWeddingInvitationShareArgs
  ): Promise<WeddingInvitationShare | null> {
    try {
      return await this.service.updateWeddingInvitationShare({
        ...args,
        data: {
          ...args.data,

          weddingId: args.data.weddingId
            ? {
                connect: args.data.weddingId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WeddingInvitationShare)
  @nestAccessControl.UseRoles({
    resource: "WeddingInvitationShare",
    action: "delete",
    possession: "any",
  })
  async deleteWeddingInvitationShare(
    @graphql.Args() args: DeleteWeddingInvitationShareArgs
  ): Promise<WeddingInvitationShare | null> {
    try {
      return await this.service.deleteWeddingInvitationShare(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => WeddingInvitation, {
    nullable: true,
    name: "weddingId",
  })
  @nestAccessControl.UseRoles({
    resource: "WeddingInvitation",
    action: "read",
    possession: "any",
  })
  async getWeddingId(
    @graphql.Parent() parent: WeddingInvitationShare
  ): Promise<WeddingInvitation | null> {
    const result = await this.service.getWeddingId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
