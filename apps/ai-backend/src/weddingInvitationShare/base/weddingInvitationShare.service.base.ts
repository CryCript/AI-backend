/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  WeddingInvitationShare as PrismaWeddingInvitationShare,
  WeddingInvitation as PrismaWeddingInvitation,
} from "@prisma/client";

export class WeddingInvitationShareServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WeddingInvitationShareCountArgs, "select">
  ): Promise<number> {
    return this.prisma.weddingInvitationShare.count(args);
  }

  async weddingInvitationShares<
    T extends Prisma.WeddingInvitationShareFindManyArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.WeddingInvitationShareFindManyArgs>
  ): Promise<PrismaWeddingInvitationShare[]> {
    return this.prisma.weddingInvitationShare.findMany<Prisma.WeddingInvitationShareFindManyArgs>(
      args
    );
  }
  async weddingInvitationShare<
    T extends Prisma.WeddingInvitationShareFindUniqueArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.WeddingInvitationShareFindUniqueArgs>
  ): Promise<PrismaWeddingInvitationShare | null> {
    return this.prisma.weddingInvitationShare.findUnique(args);
  }
  async createWeddingInvitationShare<
    T extends Prisma.WeddingInvitationShareCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.WeddingInvitationShareCreateArgs>
  ): Promise<PrismaWeddingInvitationShare> {
    return this.prisma.weddingInvitationShare.create<T>(args);
  }
  async updateWeddingInvitationShare<
    T extends Prisma.WeddingInvitationShareUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.WeddingInvitationShareUpdateArgs>
  ): Promise<PrismaWeddingInvitationShare> {
    return this.prisma.weddingInvitationShare.update<T>(args);
  }
  async deleteWeddingInvitationShare<
    T extends Prisma.WeddingInvitationShareDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.WeddingInvitationShareDeleteArgs>
  ): Promise<PrismaWeddingInvitationShare> {
    return this.prisma.weddingInvitationShare.delete(args);
  }

  async getWeddingId(
    parentId: string
  ): Promise<PrismaWeddingInvitation | null> {
    return this.prisma.weddingInvitationShare
      .findUnique({
        where: { id: parentId },
      })
      .weddingId();
  }
}
