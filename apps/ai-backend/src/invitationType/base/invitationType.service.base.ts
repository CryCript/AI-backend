/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  InvitationType as PrismaInvitationType,
  Payment as PrismaPayment,
  User as PrismaUser,
} from "@prisma/client";

export class InvitationTypeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.InvitationTypeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.invitationType.count(args);
  }

  async invitationTypes<T extends Prisma.InvitationTypeFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.InvitationTypeFindManyArgs>
  ): Promise<PrismaInvitationType[]> {
    return this.prisma.invitationType.findMany<Prisma.InvitationTypeFindManyArgs>(
      args
    );
  }
  async invitationType<T extends Prisma.InvitationTypeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.InvitationTypeFindUniqueArgs>
  ): Promise<PrismaInvitationType | null> {
    return this.prisma.invitationType.findUnique(args);
  }
  async createInvitationType<T extends Prisma.InvitationTypeCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.InvitationTypeCreateArgs>
  ): Promise<PrismaInvitationType> {
    return this.prisma.invitationType.create<T>(args);
  }
  async updateInvitationType<T extends Prisma.InvitationTypeUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.InvitationTypeUpdateArgs>
  ): Promise<PrismaInvitationType> {
    return this.prisma.invitationType.update<T>(args);
  }
  async deleteInvitationType<T extends Prisma.InvitationTypeDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.InvitationTypeDeleteArgs>
  ): Promise<PrismaInvitationType> {
    return this.prisma.invitationType.delete(args);
  }

  async findPayments(
    parentId: string,
    args: Prisma.PaymentFindManyArgs
  ): Promise<PrismaPayment[]> {
    return this.prisma.invitationType
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .payments(args);
  }

  async findUser(
    parentId: string,
    args: Prisma.UserFindManyArgs
  ): Promise<PrismaUser[]> {
    return this.prisma.invitationType
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .user(args);
  }
}
