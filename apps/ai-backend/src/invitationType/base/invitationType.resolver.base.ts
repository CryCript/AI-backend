/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { InvitationType } from "./InvitationType";
import { InvitationTypeCountArgs } from "./InvitationTypeCountArgs";
import { InvitationTypeFindManyArgs } from "./InvitationTypeFindManyArgs";
import { InvitationTypeFindUniqueArgs } from "./InvitationTypeFindUniqueArgs";
import { CreateInvitationTypeArgs } from "./CreateInvitationTypeArgs";
import { UpdateInvitationTypeArgs } from "./UpdateInvitationTypeArgs";
import { DeleteInvitationTypeArgs } from "./DeleteInvitationTypeArgs";
import { PaymentFindManyArgs } from "../../payment/base/PaymentFindManyArgs";
import { Payment } from "../../payment/base/Payment";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { InvitationTypeService } from "../invitationType.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => InvitationType)
export class InvitationTypeResolverBase {
  constructor(
    protected readonly service: InvitationTypeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "InvitationType",
    action: "read",
    possession: "any",
  })
  async _invitationTypesMeta(
    @graphql.Args() args: InvitationTypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [InvitationType])
  @nestAccessControl.UseRoles({
    resource: "InvitationType",
    action: "read",
    possession: "any",
  })
  async invitationTypes(
    @graphql.Args() args: InvitationTypeFindManyArgs
  ): Promise<InvitationType[]> {
    return this.service.invitationTypes(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => InvitationType, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "InvitationType",
    action: "read",
    possession: "own",
  })
  async invitationType(
    @graphql.Args() args: InvitationTypeFindUniqueArgs
  ): Promise<InvitationType | null> {
    const result = await this.service.invitationType(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => InvitationType)
  @nestAccessControl.UseRoles({
    resource: "InvitationType",
    action: "create",
    possession: "any",
  })
  async createInvitationType(
    @graphql.Args() args: CreateInvitationTypeArgs
  ): Promise<InvitationType> {
    return await this.service.createInvitationType({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => InvitationType)
  @nestAccessControl.UseRoles({
    resource: "InvitationType",
    action: "update",
    possession: "any",
  })
  async updateInvitationType(
    @graphql.Args() args: UpdateInvitationTypeArgs
  ): Promise<InvitationType | null> {
    try {
      return await this.service.updateInvitationType({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => InvitationType)
  @nestAccessControl.UseRoles({
    resource: "InvitationType",
    action: "delete",
    possession: "any",
  })
  async deleteInvitationType(
    @graphql.Args() args: DeleteInvitationTypeArgs
  ): Promise<InvitationType | null> {
    try {
      return await this.service.deleteInvitationType(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Payment], { name: "payments" })
  @nestAccessControl.UseRoles({
    resource: "Payment",
    action: "read",
    possession: "any",
  })
  async findPayments(
    @graphql.Parent() parent: InvitationType,
    @graphql.Args() args: PaymentFindManyArgs
  ): Promise<Payment[]> {
    const results = await this.service.findPayments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [User], { name: "user" })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async findUser(
    @graphql.Parent() parent: InvitationType,
    @graphql.Args() args: UserFindManyArgs
  ): Promise<User[]> {
    const results = await this.service.findUser(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
