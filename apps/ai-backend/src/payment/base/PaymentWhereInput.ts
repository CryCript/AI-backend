/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { InvitationTypeWhereUniqueInput } from "../../invitationType/base/InvitationTypeWhereUniqueInput";
import { ValidateNested, IsOptional, IsEnum } from "class-validator";
import { Type } from "class-transformer";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { StringFilter } from "../../util/StringFilter";
import { PaymentsMethodWhereUniqueInput } from "../../paymentsMethod/base/PaymentsMethodWhereUniqueInput";
import { EnumPaymentStatus } from "./EnumPaymentStatus";
import { UserWhereUniqueInput } from "../../user/base/UserWhereUniqueInput";

@InputType()
class PaymentWhereInput {
  @ApiProperty({
    required: false,
    type: () => InvitationTypeWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => InvitationTypeWhereUniqueInput)
  @IsOptional()
  @Field(() => InvitationTypeWhereUniqueInput, {
    nullable: true,
  })
  accessTo?: InvitationTypeWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  evidence?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: () => PaymentsMethodWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => PaymentsMethodWhereUniqueInput)
  @IsOptional()
  @Field(() => PaymentsMethodWhereUniqueInput, {
    nullable: true,
  })
  paymentMethod?: PaymentsMethodWhereUniqueInput;

  @ApiProperty({
    required: false,
    enum: EnumPaymentStatus,
  })
  @IsEnum(EnumPaymentStatus)
  @IsOptional()
  @Field(() => EnumPaymentStatus, {
    nullable: true,
  })
  status?: "Success" | "Pending" | "Failed";

  @ApiProperty({
    required: false,
    type: () => UserWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => UserWhereUniqueInput)
  @IsOptional()
  @Field(() => UserWhereUniqueInput, {
    nullable: true,
  })
  userId?: UserWhereUniqueInput;
}

export { PaymentWhereInput as PaymentWhereInput };
