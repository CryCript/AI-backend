/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { Public } from "../../decorators/public.decorator";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { WeddingInvitationComment } from "./WeddingInvitationComment";
import { WeddingInvitationCommentCountArgs } from "./WeddingInvitationCommentCountArgs";
import { WeddingInvitationCommentFindManyArgs } from "./WeddingInvitationCommentFindManyArgs";
import { WeddingInvitationCommentFindUniqueArgs } from "./WeddingInvitationCommentFindUniqueArgs";
import { CreateWeddingInvitationCommentArgs } from "./CreateWeddingInvitationCommentArgs";
import { UpdateWeddingInvitationCommentArgs } from "./UpdateWeddingInvitationCommentArgs";
import { DeleteWeddingInvitationCommentArgs } from "./DeleteWeddingInvitationCommentArgs";
import { WeddingInvitation } from "../../weddingInvitation/base/WeddingInvitation";
import { WeddingInvitationCommentService } from "../weddingInvitationComment.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => WeddingInvitationComment)
export class WeddingInvitationCommentResolverBase {
  constructor(
    protected readonly service: WeddingInvitationCommentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "WeddingInvitationComment",
    action: "read",
    possession: "any",
  })
  async _weddingInvitationCommentsMeta(
    @graphql.Args() args: WeddingInvitationCommentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [WeddingInvitationComment])
  @nestAccessControl.UseRoles({
    resource: "WeddingInvitationComment",
    action: "read",
    possession: "any",
  })
  async weddingInvitationComments(
    @graphql.Args() args: WeddingInvitationCommentFindManyArgs
  ): Promise<WeddingInvitationComment[]> {
    return this.service.weddingInvitationComments(args);
  }

  @Public()
  @graphql.Query(() => WeddingInvitationComment, { nullable: true })
  async weddingInvitationComment(
    @graphql.Args() args: WeddingInvitationCommentFindUniqueArgs
  ): Promise<WeddingInvitationComment | null> {
    const result = await this.service.weddingInvitationComment(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WeddingInvitationComment)
  @nestAccessControl.UseRoles({
    resource: "WeddingInvitationComment",
    action: "create",
    possession: "any",
  })
  async createWeddingInvitationComment(
    @graphql.Args() args: CreateWeddingInvitationCommentArgs
  ): Promise<WeddingInvitationComment> {
    return await this.service.createWeddingInvitationComment({
      ...args,
      data: {
        ...args.data,

        weddingId: args.data.weddingId
          ? {
              connect: args.data.weddingId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WeddingInvitationComment)
  @nestAccessControl.UseRoles({
    resource: "WeddingInvitationComment",
    action: "update",
    possession: "any",
  })
  async updateWeddingInvitationComment(
    @graphql.Args() args: UpdateWeddingInvitationCommentArgs
  ): Promise<WeddingInvitationComment | null> {
    try {
      return await this.service.updateWeddingInvitationComment({
        ...args,
        data: {
          ...args.data,

          weddingId: args.data.weddingId
            ? {
                connect: args.data.weddingId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WeddingInvitationComment)
  @nestAccessControl.UseRoles({
    resource: "WeddingInvitationComment",
    action: "delete",
    possession: "any",
  })
  async deleteWeddingInvitationComment(
    @graphql.Args() args: DeleteWeddingInvitationCommentArgs
  ): Promise<WeddingInvitationComment | null> {
    try {
      return await this.service.deleteWeddingInvitationComment(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => WeddingInvitation, {
    nullable: true,
    name: "weddingId",
  })
  @nestAccessControl.UseRoles({
    resource: "WeddingInvitation",
    action: "read",
    possession: "any",
  })
  async getWeddingId(
    @graphql.Parent() parent: WeddingInvitationComment
  ): Promise<WeddingInvitation | null> {
    const result = await this.service.getWeddingId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
