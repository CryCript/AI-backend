/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  WeddingInvitationComment as PrismaWeddingInvitationComment,
  WeddingInvitation as PrismaWeddingInvitation,
} from "@prisma/client";

export class WeddingInvitationCommentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WeddingInvitationCommentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.weddingInvitationComment.count(args);
  }

  async weddingInvitationComments<
    T extends Prisma.WeddingInvitationCommentFindManyArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.WeddingInvitationCommentFindManyArgs>
  ): Promise<PrismaWeddingInvitationComment[]> {
    return this.prisma.weddingInvitationComment.findMany<Prisma.WeddingInvitationCommentFindManyArgs>(
      args
    );
  }
  async weddingInvitationComment<
    T extends Prisma.WeddingInvitationCommentFindUniqueArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.WeddingInvitationCommentFindUniqueArgs>
  ): Promise<PrismaWeddingInvitationComment | null> {
    return this.prisma.weddingInvitationComment.findUnique(args);
  }
  async createWeddingInvitationComment<
    T extends Prisma.WeddingInvitationCommentCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.WeddingInvitationCommentCreateArgs>
  ): Promise<PrismaWeddingInvitationComment> {
    return this.prisma.weddingInvitationComment.create<T>(args);
  }
  async updateWeddingInvitationComment<
    T extends Prisma.WeddingInvitationCommentUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.WeddingInvitationCommentUpdateArgs>
  ): Promise<PrismaWeddingInvitationComment> {
    return this.prisma.weddingInvitationComment.update<T>(args);
  }
  async deleteWeddingInvitationComment<
    T extends Prisma.WeddingInvitationCommentDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.WeddingInvitationCommentDeleteArgs>
  ): Promise<PrismaWeddingInvitationComment> {
    return this.prisma.weddingInvitationComment.delete(args);
  }

  async getWeddingId(
    parentId: string
  ): Promise<PrismaWeddingInvitation | null> {
    return this.prisma.weddingInvitationComment
      .findUnique({
        where: { id: parentId },
      })
      .weddingId();
  }
}
