/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  PaymentsMethod as PrismaPaymentsMethod,
  Payment as PrismaPayment,
} from "@prisma/client";

export class PaymentsMethodServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PaymentsMethodCountArgs, "select">
  ): Promise<number> {
    return this.prisma.paymentsMethod.count(args);
  }

  async paymentsMethods<T extends Prisma.PaymentsMethodFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PaymentsMethodFindManyArgs>
  ): Promise<PrismaPaymentsMethod[]> {
    return this.prisma.paymentsMethod.findMany<Prisma.PaymentsMethodFindManyArgs>(
      args
    );
  }
  async paymentsMethod<T extends Prisma.PaymentsMethodFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PaymentsMethodFindUniqueArgs>
  ): Promise<PrismaPaymentsMethod | null> {
    return this.prisma.paymentsMethod.findUnique(args);
  }
  async createPaymentsMethod<T extends Prisma.PaymentsMethodCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PaymentsMethodCreateArgs>
  ): Promise<PrismaPaymentsMethod> {
    return this.prisma.paymentsMethod.create<T>(args);
  }
  async updatePaymentsMethod<T extends Prisma.PaymentsMethodUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PaymentsMethodUpdateArgs>
  ): Promise<PrismaPaymentsMethod> {
    return this.prisma.paymentsMethod.update<T>(args);
  }
  async deletePaymentsMethod<T extends Prisma.PaymentsMethodDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PaymentsMethodDeleteArgs>
  ): Promise<PrismaPaymentsMethod> {
    return this.prisma.paymentsMethod.delete(args);
  }

  async findPayments(
    parentId: string,
    args: Prisma.PaymentFindManyArgs
  ): Promise<PrismaPayment[]> {
    return this.prisma.paymentsMethod
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .payments(args);
  }
}
