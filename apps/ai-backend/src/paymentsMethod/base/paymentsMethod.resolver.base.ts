/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PaymentsMethod } from "./PaymentsMethod";
import { PaymentsMethodCountArgs } from "./PaymentsMethodCountArgs";
import { PaymentsMethodFindManyArgs } from "./PaymentsMethodFindManyArgs";
import { PaymentsMethodFindUniqueArgs } from "./PaymentsMethodFindUniqueArgs";
import { CreatePaymentsMethodArgs } from "./CreatePaymentsMethodArgs";
import { UpdatePaymentsMethodArgs } from "./UpdatePaymentsMethodArgs";
import { DeletePaymentsMethodArgs } from "./DeletePaymentsMethodArgs";
import { PaymentFindManyArgs } from "../../payment/base/PaymentFindManyArgs";
import { Payment } from "../../payment/base/Payment";
import { PaymentsMethodService } from "../paymentsMethod.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PaymentsMethod)
export class PaymentsMethodResolverBase {
  constructor(
    protected readonly service: PaymentsMethodService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PaymentsMethod",
    action: "read",
    possession: "any",
  })
  async _paymentsMethodsMeta(
    @graphql.Args() args: PaymentsMethodCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PaymentsMethod])
  @nestAccessControl.UseRoles({
    resource: "PaymentsMethod",
    action: "read",
    possession: "any",
  })
  async paymentsMethods(
    @graphql.Args() args: PaymentsMethodFindManyArgs
  ): Promise<PaymentsMethod[]> {
    return this.service.paymentsMethods(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PaymentsMethod, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PaymentsMethod",
    action: "read",
    possession: "own",
  })
  async paymentsMethod(
    @graphql.Args() args: PaymentsMethodFindUniqueArgs
  ): Promise<PaymentsMethod | null> {
    const result = await this.service.paymentsMethod(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PaymentsMethod)
  @nestAccessControl.UseRoles({
    resource: "PaymentsMethod",
    action: "create",
    possession: "any",
  })
  async createPaymentsMethod(
    @graphql.Args() args: CreatePaymentsMethodArgs
  ): Promise<PaymentsMethod> {
    return await this.service.createPaymentsMethod({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PaymentsMethod)
  @nestAccessControl.UseRoles({
    resource: "PaymentsMethod",
    action: "update",
    possession: "any",
  })
  async updatePaymentsMethod(
    @graphql.Args() args: UpdatePaymentsMethodArgs
  ): Promise<PaymentsMethod | null> {
    try {
      return await this.service.updatePaymentsMethod({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PaymentsMethod)
  @nestAccessControl.UseRoles({
    resource: "PaymentsMethod",
    action: "delete",
    possession: "any",
  })
  async deletePaymentsMethod(
    @graphql.Args() args: DeletePaymentsMethodArgs
  ): Promise<PaymentsMethod | null> {
    try {
      return await this.service.deletePaymentsMethod(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Payment], { name: "payments" })
  @nestAccessControl.UseRoles({
    resource: "Payment",
    action: "read",
    possession: "any",
  })
  async findPayments(
    @graphql.Parent() parent: PaymentsMethod,
    @graphql.Args() args: PaymentFindManyArgs
  ): Promise<Payment[]> {
    const results = await this.service.findPayments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
